// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// criterionquantiles
arma::mat criterionquantiles(const arma::vec& y, const arma::mat& X, const arma::vec& level, const arma::mat& estimator_grid, int nbr_bootstraps, int w, std::string bs_type);
RcppExport SEXP _LassoBoot_criterionquantiles(SEXP ySEXP, SEXP XSEXP, SEXP levelSEXP, SEXP estimator_gridSEXP, SEXP nbr_bootstrapsSEXP, SEXP wSEXP, SEXP bs_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type estimator_grid(estimator_gridSEXP);
    Rcpp::traits::input_parameter< int >::type nbr_bootstraps(nbr_bootstrapsSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    Rcpp::traits::input_parameter< std::string >::type bs_type(bs_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(criterionquantiles(y, X, level, estimator_grid, nbr_bootstraps, w, bs_type));
    return rcpp_result_gen;
END_RCPP
}
// lasso
arma::mat lasso(const arma::mat& X, const arma::vec& Y, int out, int numlam, double maxIter, double optTol, double standardize);
RcppExport SEXP _LassoBoot_lasso(SEXP XSEXP, SEXP YSEXP, SEXP outSEXP, SEXP numlamSEXP, SEXP maxIterSEXP, SEXP optTolSEXP, SEXP standardizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type numlam(numlamSEXP);
    Rcpp::traits::input_parameter< double >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type optTol(optTolSEXP);
    Rcpp::traits::input_parameter< double >::type standardize(standardizeSEXP);
    rcpp_result_gen = Rcpp::wrap(lasso(X, Y, out, numlam, maxIter, optTol, standardize));
    return rcpp_result_gen;
END_RCPP
}
// moving_block_bootstrap
arma::mat moving_block_bootstrap(const arma::mat data, int B, int w);
RcppExport SEXP _LassoBoot_moving_block_bootstrap(SEXP dataSEXP, SEXP BSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_block_bootstrap(data, B, w));
    return rcpp_result_gen;
END_RCPP
}
// quantileestimated
arma::vec quantileestimated(const arma::mat& Y, const arma::vec& X, const arma::vec& level, arma::vec& lambda_grid, arma::mat& criterion_quantiles);
RcppExport SEXP _LassoBoot_quantileestimated(SEXP YSEXP, SEXP XSEXP, SEXP levelSEXP, SEXP lambda_gridSEXP, SEXP criterion_quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_grid(lambda_gridSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type criterion_quantiles(criterion_quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileestimated(Y, X, level, lambda_grid, criterion_quantiles));
    return rcpp_result_gen;
END_RCPP
}
// quantileoracle
arma::vec quantileoracle(int n, int p, double kappa, double rho, const arma::vec& level, float sdev, int nbr_bootstraps);
RcppExport SEXP _LassoBoot_quantileoracle(SEXP nSEXP, SEXP pSEXP, SEXP kappaSEXP, SEXP rhoSEXP, SEXP levelSEXP, SEXP sdevSEXP, SEXP nbr_bootstrapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< float >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< int >::type nbr_bootstraps(nbr_bootstrapsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileoracle(n, p, kappa, rho, level, sdev, nbr_bootstraps));
    return rcpp_result_gen;
END_RCPP
}
// quantileoracleconditional
arma::vec quantileoracleconditional(const arma::mat& X, const arma::vec& level, float sdev, int nbr_bootstraps);
RcppExport SEXP _LassoBoot_quantileoracleconditional(SEXP XSEXP, SEXP levelSEXP, SEXP sdevSEXP, SEXP nbr_bootstrapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< float >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< int >::type nbr_bootstraps(nbr_bootstrapsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileoracleconditional(X, level, sdev, nbr_bootstraps));
    return rcpp_result_gen;
END_RCPP
}
// stationary_block_bootstrap
arma::mat stationary_block_bootstrap(const arma::mat data, int B, int w);
RcppExport SEXP _LassoBoot_stationary_block_bootstrap(SEXP dataSEXP, SEXP BSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(stationary_block_bootstrap(data, B, w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LassoBoot_criterionquantiles", (DL_FUNC) &_LassoBoot_criterionquantiles, 7},
    {"_LassoBoot_lasso", (DL_FUNC) &_LassoBoot_lasso, 7},
    {"_LassoBoot_moving_block_bootstrap", (DL_FUNC) &_LassoBoot_moving_block_bootstrap, 3},
    {"_LassoBoot_quantileestimated", (DL_FUNC) &_LassoBoot_quantileestimated, 5},
    {"_LassoBoot_quantileoracle", (DL_FUNC) &_LassoBoot_quantileoracle, 7},
    {"_LassoBoot_quantileoracleconditional", (DL_FUNC) &_LassoBoot_quantileoracleconditional, 4},
    {"_LassoBoot_stationary_block_bootstrap", (DL_FUNC) &_LassoBoot_stationary_block_bootstrap, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_LassoBoot(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
